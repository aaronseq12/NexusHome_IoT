version: '3.8'

services:
  # NexusHome Main Application
  nexushome-app:
    build:
      context: .
      dockerfile: Dockerfile
    image: nexushome-iot:latest
    container_name: nexushome-app
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80;https://+:443
      - ASPNETCORE_Kestrel__Certificates__Default__Password=nexushome-cert-password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/app/certificates/aspnetapp.pfx
    depends_on:
      - sqlserver
      - redis
      - mqtt-broker
      - timescaledb
    volumes:
      - ./certificates:/app/certificates:ro
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - nexushome-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: nexushome-sqlserver
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=NexusHome@2025
      - MSSQL_PID=Developer
      - MSSQL_TCP_PORT=1433
    ports:
      - "1433:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - nexushome-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P NexusHome@2025 -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # TimescaleDB for Time Series Data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: nexushome-timescaledb
    restart: unless-stopped
    environment:
      - POSTGRES_DB=nexushome_timeseries
      - POSTGRES_USER=nexususer
      - POSTGRES_PASSWORD=NexusHome@2025
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
      - ./database/timescale-init:/docker-entrypoint-initdb.d:ro
    networks:
      - nexushome-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexususer -d nexushome_timeseries"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nexushome-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass "NexusHome@2025"
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - nexushome-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 30s

  # MQTT Broker (Eclipse Mosquitto)
  mqtt-broker:
    image: eclipse-mosquitto:2.0
    container_name: nexushome-mqtt
    restart: unless-stopped
    ports:
      - "1883:1883"  # MQTT port
      - "9001:9001"  # WebSocket port
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./config/mosquitto-passwd:/mosquitto/config/passwd:ro
      - mosquitto-data:/mosquitto/data
      - mosquitto-logs:/mosquitto/log
    networks:
      - nexushome-network
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-h", "localhost", "-t", "$$SYS/#", "-C", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # InfluxDB for Metrics and Monitoring
  influxdb:
    image: influxdb:2.7-alpine
    container_name: nexushome-influxdb
    restart: unless-stopped
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=NexusHome@2025
      - DOCKER_INFLUXDB_INIT_ORG=NexusHome
      - DOCKER_INFLUXDB_INIT_BUCKET=energy_metrics
      - DOCKER_INFLUXDB_INIT_RETENTION=90d
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=nexushome-admin-token-2025
    ports:
      - "8086:8086"
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    networks:
      - nexushome-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: nexushome-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=NexusHome@2025
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - influxdb
    networks:
      - nexushome-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health && echo 'ready'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nexushome-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certificates:/etc/nginx/certificates:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - nexushome-app
      - grafana
    networks:
      - nexushome-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: nexushome-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - nexushome-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: nexushome-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - nexushome-network

  # Portainer for Container Management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: nexushome-portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    ports:
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - nexushome-network

  # Jupyter Notebook for ML Development
  jupyter:
    image: jupyter/tensorflow-notebook:latest
    container_name: nexushome-jupyter
    restart: unless-stopped
    environment:
      - JUPYTER_ENABLE_LAB=yes
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
      - ./models:/home/jovyan/models
    networks:
      - nexushome-network

  # MLflow for ML Model Management
  mlflow:
    image: python:3.9-slim
    container_name: nexushome-mlflow
    restart: unless-stopped
    command: >
      bash -c "pip install mlflow psycopg2-binary &&
               mlflow server --host 0.0.0.0 --port 5000
               --backend-store-uri postgresql://nexususer:NexusHome@2025@timescaledb:5432/nexushome_timeseries
               --default-artifact-root /mlflow/artifacts"
    ports:
      - "5000:5000"
    volumes:
      - mlflow-artifacts:/mlflow/artifacts
    depends_on:
      - timescaledb
    networks:
      - nexushome-network

  # Home Assistant (Optional Integration)
  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: nexushome-homeassistant
    restart: unless-stopped
    environment:
      - TZ=America/New_York
    ports:
      - "8123:8123"
    volumes:
      - homeassistant-config:/config
      - /etc/localtime:/etc/localtime:ro
    privileged: true
    networks:
      - nexushome-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# Networks
networks:
  nexushome-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  sqlserver-data:
    driver: local
  timescaledb-data:
    driver: local
  redis-data:
    driver: local
  mosquitto-data:
    driver: local
  mosquitto-logs:
    driver: local
  influxdb-data:
    driver: local
  influxdb-config:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  portainer-data:
    driver: local
  mlflow-artifacts:
    driver: local
  homeassistant-config:
    driver: local

# Health check for the entire stack
x-healthcheck-common: &healthcheck-common
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s